#!/usr/bin/env ts-node

/**
 * Theme Migration Script
 * 
 * This script helps migrate a theme file from a legacy format to the new ThemeConfig format.
 * Usage: npm run theme:migrate -- <path-to-theme-file> [--output=<output-path>] [--no-defaults]
 */

import fs from 'fs';
import path from 'path';
import { migrateFromLegacyTheme, createMigrationReport } from '../src/core/theme/theme-migration';
import { validateTheme } from '../src/core/theme/theme-utils';
import { execSync } from 'child_process';

// Parse command line arguments
const args = process.argv.slice(2);
const themePath = args[0];
const outputPathArg = args.find(arg => arg.startsWith('--output='));
const outputPath = outputPathArg ? outputPathArg.split('=')[1] : '';
const noDefaults = args.includes('--no-defaults');
const verbose = args.includes('--verbose');
const force = args.includes('--force');

// Print usage if no theme file is specified
if (!themePath) {
  console.error('‚ùå Error: No theme file specified.');
  console.log('\nUsage: npm run theme:migrate -- <path-to-theme-file> [--output=<output-path>] [--no-defaults] [--verbose] [--force]');
  console.log('\nOptions:');
  console.log('  --output=<path>    Output path for the migrated theme file');
  console.log('  --no-defaults      Do not add default values for missing properties');
  console.log('  --verbose          Show verbose output during migration');
  console.log('  --force            Overwrite output file if it exists');
  process.exit(1);
}

// Resolve the theme file path
const resolvedThemePath = path.resolve(process.cwd(), themePath);

// Check if the theme file exists
if (!fs.existsSync(resolvedThemePath)) {
  console.error(`‚ùå Error: Theme file not found: ${resolvedThemePath}`);
  process.exit(1);
}

// Determine the output path
let finalOutputPath = outputPath;
if (!finalOutputPath) {
  const parsedPath = path.parse(resolvedThemePath);
  finalOutputPath = path.join(parsedPath.dir, `${parsedPath.name}.migrated${parsedPath.ext}`);
}

// Check if the output file exists
if (fs.existsSync(finalOutputPath) && !force) {
  console.error(`‚ùå Error: Output file already exists: ${finalOutputPath}`);
  console.log('Use --force to overwrite the existing file.');
  process.exit(1);
}

console.log('üîç Starting theme migration...');
console.log(`Source: ${resolvedThemePath}`);
console.log(`Output: ${finalOutputPath}`);

try {
  // Read the theme file
  const themeFileContent = fs.readFileSync(resolvedThemePath, 'utf8');
  
  // Extract the theme object name (assuming TypeScript/JavaScript module)
  const themeNameMatch = themeFileContent.match(/export\s+const\s+(\w+)\s*:/);
  const themeName = themeNameMatch ? themeNameMatch[1] : 'theme';
  
  if (verbose) {
    console.log(`Detected theme object name: ${themeName}`);
  }
  
  // Create a temporary file to evaluate the theme object
  const tempFile = `
    const fs = require('fs');
    const path = require('path');
    
    // Load the theme file
    const themeModule = require('${resolvedThemePath.replace(/\\/g, '\\\\')}');
    
    // Extract the theme object
    const themeObj = themeModule.${themeName};
    
    // Write the theme object to a JSON file
    fs.writeFileSync('temp-theme.json', JSON.stringify(themeObj, null, 2));
  `;
  
  fs.writeFileSync('temp-migrator.js', tempFile);
  
  // Execute the temporary file to extract the theme object
  execSync('node temp-migrator.js');
  
  // Read the theme object from the JSON file
  const themeJson = JSON.parse(fs.readFileSync('temp-theme.json', 'utf8'));
  
  // Clean up temporary files
  fs.unlinkSync('temp-migrator.js');
  fs.unlinkSync('temp-theme.json');
  
  // Validate the original theme
  const originalValidationErrors = validateTheme(themeJson);
  
  if (verbose) {
    console.log('Original theme validation errors:');
    originalValidationErrors.forEach(error => {
      console.log(`  - ${error}`);
    });
  }
  
  // Migrate the theme
  const migratedTheme = migrateFromLegacyTheme(themeJson, {
    generateMissingColors: !noDefaults,
    addDefaultShadows: !noDefaults,
    addDefaultTransitions: !noDefaults,
    addDefaultBorderRadius: !noDefaults
  });
  
  // Validate the migrated theme
  const migratedValidationErrors = validateTheme(migratedTheme);
  
  // Generate a migration report
  const report = createMigrationReport(themeJson, migratedTheme);
  
  // Create the migrated theme file content
  const migratedFileContent = `
import { ThemeConfig } from '../core/theme/consolidated-types';

/**
 * Migrated theme (generated by migration script)
 * Original file: ${path.basename(resolvedThemePath)}
 * Migration date: ${new Date().toISOString()}
 */
export const ${themeName}: ThemeConfig = ${JSON.stringify(migratedTheme, null, 2)};
`;
  
  // Write the migrated theme file
  fs.writeFileSync(finalOutputPath, migratedFileContent);
  
  console.log('‚úÖ Theme migration completed successfully.');
  console.log(`Migrated theme saved to: ${finalOutputPath}`);
  
  // Print the migration report
  console.log('\nüìä Migration Report:');
  console.log(`Added properties: ${report.addedProperties.length > 0 ? report.addedProperties.join(', ') : 'None'}`);
  console.log(`Modified properties: ${report.modifiedProperties.length > 0 ? report.modifiedProperties.join(', ') : 'None'}`);
  console.log(`Original validation errors: ${report.originalValidationErrors.length}`);
  console.log(`Migrated validation errors: ${report.migratedValidationErrors.length}`);
  
  if (report.migratedValidationErrors.length > 0) {
    console.log('\n‚ö†Ô∏è The migrated theme still has validation errors:');
    report.migratedValidationErrors.forEach(error => {
      console.log(`  - ${error}`);
    });
    console.log('\nPlease manually fix these errors in the migrated theme file.');
  }
} catch (error) {
  console.error(`‚ùå Error during migration: ${error.message}`);
  console.error(error.stack);
  
  // Clean up any temporary files
  if (fs.existsSync('temp-migrator.js')) {
    fs.unlinkSync('temp-migrator.js');
  }
  if (fs.existsSync('temp-theme.json')) {
    fs.unlinkSync('temp-theme.json');
  }
  
  process.exit(1);
} 